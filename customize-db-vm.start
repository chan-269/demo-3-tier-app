#!/bin/sh
#
# This script setups the entire OVF VM based on properties
#
echo "- Retrieving OVF information"
FILE_CUSTOMIZATION="/etc/customization.state"
FILE_OVFENVIRONMENT="/tmp/ovfenvironment.xml"

#
# If customization was already launch, exit right away
# Do the following ONLY if the VM is started from the vAPP
# If not from the vApp then the VM will keep its previous files settings

if [ -s $FILE_CUSTOMIZATION ]
then
    exit 0
fi

# Customization process
echo "> Retrieving OVF information..."

# Retrieve OVF settings from VMware Tools.
/usr/bin/vmtoolsd --cmd "info-get guestinfo.ovfEnv" > $FILE_OVFENVIRONMENT

if [ -s "$FILE_OVFENVIRONMENT" ]
then
    echo $(date) > $FILE_CUSTOMIZATION
    # setting the environment 
    # #Web server details
    # web_name=$(cat $FILE_OVFENVIRONMENT | grep web_name  | cut -d '"' -f 4 | head -1)
    # web_ip=$(cat $FILE_OVFENVIRONMENT | grep web_ip  | cut -d '"' -f 4 | head -1)
    # web_netmask=$(cat $FILE_OVFENVIRONMENT | grep web_netmask  | cut -d '"' -f 4 | head -1)
    # web_gw=$(cat $FILE_OVFENVIRONMENT | grep web_gw  | cut -d '"' -f 4 | head -1)

    # # App Server 1 details
    # app1_name=$(cat $FILE_OVFENVIRONMENT | grep app1_name  | cut -d '"' -f 4 | head -1)
    # app1_ip=$(cat $FILE_OVFENVIRONMENT | grep app1_ip  | cut -d '"' -f 4 | head -1)
    # app1_netmask=$(cat $FILE_OVFENVIRONMENT | grep app1_netmask  | cut -d '"' -f 4 | head -1)
    # app1_gw=$(cat $FILE_OVFENVIRONMENT | grep app1_gw  | cut -d '"' -f 4 | head -1)
    # # App Server 2 details
    # app2_name=$(cat $FILE_OVFENVIRONMENT | grep app2_name  | cut -d '"' -f 4 | head -1)
    # app2_ip=$(cat $FILE_OVFENVIRONMENT | grep app2_ip  | cut -d '"' -f 4 | head -1)
    # app2_netmask=$(cat $FILE_OVFENVIRONMENT | grep app2_netmask  | cut -d '"' -f 4 | head -1)
    # app2_gw=$(cat $FILE_OVFENVIRONMENT | grep app2_gw  | cut -d '"' -f 4 | head -1)

    # DB Server 1 details
    db_name=$(cat $FILE_OVFENVIRONMENT | grep db_name  | cut -d '"' -f 4 | head -1)
    db_ip=$(cat $FILE_OVFENVIRONMENT | grep db_ip  | cut -d '"' -f 4 | head -1)
    db_netmask=$(cat $FILE_OVFENVIRONMENT | grep db_netmask  | cut -d '"' -f 4 | head -1)
    db_gw=$(cat $FILE_OVFENVIRONMENT | grep db_gw  | cut -d '"' -f 4 | head -1)

    #db_url=$(cat $FILE_OVFENVIRONMENT | grep db_url  | cut -d '"' -f 4 | head -1)


    echo "Alpine Linux Settings" >> $FILE_CUSTOMIZATION
    echo "=====================" >> $FILE_CUSTOMIZATION
    echo "hostname:    $db_name" >> $FILE_CUSTOMIZATION
    echo "ipaddress:   $db_ip" >> $FILE_CUSTOMIZATION
    echo "netprefix:   $db_netmask" >> $FILE_CUSTOMIZATION
    echo "gateway      $db_gw" >> $FILE_CUSTOMIZATION

    #
    # Update the hosts file to reflect the settings
    #
    echo "- Setting application environment"
    echo "127.0.0.1         localhost" > /etc/hosts
    #echo "$web_ip         $web_name" >> /etc/hosts
    echo "$db_ip         $db_name" >> /etc/hosts
    #echo "$app1_ip        $app1_name" >> /etc/hosts
    #echo "$app2_ip        $app2_name" >> /etc/hosts
    #
    #
    # Networking settings
    #
    echo "- Setting networking environment"

    setup-hostname $db_name
    hostname -F /etc/hostname


    # # Setup Alpine networking (if either ip/netprefix/gw is missing, we keep dhcp)
    if [ -z "$db_ip" ] || [ -z "$db_netmask" ] ||  [ -z "$db_gw" ]
    then
        echo "DHCP CONFIG, skipping..."
    else
        echo "STATIC CONFIG, configuring..."

		cat > /etc/network/interfaces <<-EOF
		# This file describes the network interfaces available on your system
        # and how to activate them. For more information, see interfaces(5).
        ######
        ## This file is autogenerated by the OVF templatei
        ######
        # The loopback network interface
        auto lo
        iface lo inet loopback
        # The primary network interface
        auto eth0
        allow-hotplug eth0
        iface eth0 inet static
        address $db_ip
        netmask $db_netmask
        gateway $db_gw
		EOF

        # restart networking
        rc-service networking restart
    fi

    ## THE END
    /etc/init.d/networking restart
    ifdown eth0
    ifup eth0
    #invoke-rc.d hostname.sh start

    #sed -i "s,mongo-db-url,$db_url," /root/employee-database/employee_database.py

    reboot
fi

exit 0