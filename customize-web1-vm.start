#!/bin/sh
#
# This script setups the entire OVF VM based on properties
#
echo "- Retrieving OVF information"
FILE_CUSTOMIZATION="/etc/customization.state"
FILE_OVFENVIRONMENT="/tmp/ovfenvironment.xml"

#
# If customization was already launch, exit right away
# Do the following ONLY if the VM is started from the vAPP
# If not from the vApp then the VM will keep its previous files settings

if [ -s $FILE_CUSTOMIZATION ]
then
    exit 0
fi

# Customization process
echo "> Retrieving OVF information..."

# Retrieve OVF settings from VMware Tools.
/usr/bin/vmtoolsd --cmd "info-get guestinfo.ovfEnv" > $FILE_OVFENVIRONMENT

if [ -s "$FILE_OVFENVIRONMENT" ]
then
    echo $(date) > $FILE_CUSTOMIZATION
    # setting the environment 
    #Web server 1 details
    web1_name=$(cat $FILE_OVFENVIRONMENT | grep web1_name  | cut -d '"' -f 4 | head -1)
    web1_ip=$(cat $FILE_OVFENVIRONMENT | grep web1_ip  | cut -d '"' -f 4 | head -1)
    web1_netmask=$(cat $FILE_OVFENVIRONMENT | grep web1_netmask  | cut -d '"' -f 4 | head -1)
    web1_gw=$(cat $FILE_OVFENVIRONMENT | grep web1_gw  | cut -d '"' -f 4 | head -1)

    #Web server 2 details
    web2_name=$(cat $FILE_OVFENVIRONMENT | grep web2_name  | cut -d '"' -f 4 | head -1)
    web2_ip=$(cat $FILE_OVFENVIRONMENT | grep web2_ip  | cut -d '"' -f 4 | head -1)
    web2_netmask=$(cat $FILE_OVFENVIRONMENT | grep web2_netmask  | cut -d '"' -f 4 | head -1)
    web2_gw=$(cat $FILE_OVFENVIRONMENT | grep web2_gw  | cut -d '"' -f 4 | head -1)

    # App Server 1 details
    app1_name=$(cat $FILE_OVFENVIRONMENT | grep app1_name  | cut -d '"' -f 4 | head -1)
    app1_ip=$(cat $FILE_OVFENVIRONMENT | grep app1_ip  | cut -d '"' -f 4 | head -1)
    app1_netmask=$(cat $FILE_OVFENVIRONMENT | grep app1_netmask  | cut -d '"' -f 4 | head -1)
    app1_gw=$(cat $FILE_OVFENVIRONMENT | grep app1_gw  | cut -d '"' -f 4 | head -1)
    # App Server 2 details
    app2_name=$(cat $FILE_OVFENVIRONMENT | grep app2_name  | cut -d '"' -f 4 | head -1)
    app2_ip=$(cat $FILE_OVFENVIRONMENT | grep app2_ip  | cut -d '"' -f 4 | head -1)
    app2_netmask=$(cat $FILE_OVFENVIRONMENT | grep app2_netmask  | cut -d '"' -f 4 | head -1)
    app2_gw=$(cat $FILE_OVFENVIRONMENT | grep app2_gw  | cut -d '"' -f 4 | head -1)

    # DB Server 1 details
    # db_name=$(cat $FILE_OVFENVIRONMENT | grep db_name  | cut -d '"' -f 4 | head -1)
    # db_ip=$(cat $FILE_OVFENVIRONMENT | grep db_ip  | cut -d '"' -f 4 | head -1)
    # db_netmask=$(cat $FILE_OVFENVIRONMENT | grep db_netmask  | cut -d '"' -f 4 | head -1)
    # db_gw=$(cat $FILE_OVFENVIRONMENT | grep web_gw  | cut -d '"' -f 4 | head -1)


    echo "Alpine Linux Settings" >> $FILE_CUSTOMIZATION
    echo "=====================" >> $FILE_CUSTOMIZATION
    echo "hostname:    $web1_name" >> $FILE_CUSTOMIZATION
    echo "ipaddress:   $web1_ip" >> $FILE_CUSTOMIZATION
    echo "netprefix:   $web1_netmask" >> $FILE_CUSTOMIZATION
    echo "gateway      $web1_gw" >> $FILE_CUSTOMIZATION

    #
    # Update the hosts file to reflect the settings
    #
    echo "- Setting application environment"
    echo "127.0.0.1         localhost" > /etc/hosts
    echo "$web1_ip         $web1_name" >> /etc/hosts
    #echo "$db_ip         $db_name" >> /etc/hosts
    echo "$app1_ip        $app1_name" >> /etc/hosts
    echo "$app2_ip        $app2_name" >> /etc/hosts
    #
    #
    # Networking settings
    #
    echo "- Setting networking environment"
   
    setup-hostname $web1_name
    hostname -F /etc/hostname

    # Setup Alpine networking (if either ip/netprefix/gw is missing, we keep dhcp)
    if [ -z "$web1_ip" ] || [ -z "$web1_netmask" ] ||  [ -z "$web1_gw" ]
    then
        echo "DHCP CONFIG, skipping..."
    else
        echo "STATIC CONFIG, configuring..."

		cat > /etc/network/interfaces <<-EOF
		# This file describes the network interfaces available on your system
        # and how to activate them. For more information, see interfaces(5).
        ######
        ## This file is autogenerated by the OVF templatei
        ######
        # The loopback network interface
        auto lo
        iface lo inet loopback
        # The primary network interface
        auto eth0
        allow-hotplug eth0
        iface eth0 inet static
        address $web1_ip
        netmask $web1_netmask
        gateway $web1_gw
		EOF

        # restart networking
        rc-service networking restart
    fi

## THE END
/etc/init.d/networking restart
ifdown eth0
ifup eth0
#invoke-rc.d hostname.sh start
service nginx stop

cp /etc/nginx/http.d/default.conf /etc/nginx/http.d/default.conf-orig

sed -i "3 i \  " /etc/nginx/http.d/default.conf
sed -i '4 i \upstream app{ ' /etc/nginx/http.d/default.conf
sed -i "5 i \  server $app1_ip:8080;" /etc/nginx/http.d/default.conf
sed -i "6 i \  server $app2_ip:8080;" /etc/nginx/http.d/default.conf
sed -i "7 i \}" /etc/nginx/http.d/default.conf
sed -i "8 i \  " /etc/nginx/http.d/default.conf
sed -i "9 i \  " /etc/nginx/http.d/default.conf

sed -i "17s/return 404/#return 404/" /etc/nginx/http.d/default.conf
sed -i "18 i \                proxy_pass http:\/\/app ;" /etc/nginx/http.d/default.conf
sed -i '19 i \                proxy_set_header Host $host;' /etc/nginx/http.d/default.conf
sed -i '20 i \                proxy_set_header X-Real-IP $remote_addr;' /etc/nginx/http.d/default.conf
sed -i '21 i \                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' /etc/nginx/http.d/default.conf
sed -i '22 i \                proxy_set_header X-Forwarded-Proto $scheme;' /etc/nginx/http.d/default.conf



service nginx start

reboot

fi

exit 0